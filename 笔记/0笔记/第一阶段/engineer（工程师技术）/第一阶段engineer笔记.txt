



2月8号   day01


	
	·分区规划及使用：

	  ·硬盘分区管理： （  ** 磁盘中：每个扇区，512字节）

	**	文件系统的作用： 数据在空间中排列规则

		·识别硬盘=>分区规划=>格式化=>挂载使用
	   
	   一、识别硬盘 ：  
			lsblk   查看本机识别的硬盘 列出块设备 

	   二、分区规划  ：
			·MBR/msdos   分区模式（主引导记录分区方案）   #传统的分区方式，windows比较常用
			
		分区的类型： 主分区   扩展分区  逻辑分区  
		
		·划分分区： fdisk 分区设备路径
		
		** -最多只能有4个主分区（理论上的，实际上都是3个主分区+扩展分区），   
		   -1～4个主分区，或者0～3个主分区+1个扩展分区（n个逻辑分区）
		   -最大支持容量为2.2TB 的磁盘
		   -扩展分区不能格式化
		fdisk /dev/vdb   交互式的
			n 创建新的分区  ----->回车 ---->回车 ---->回车---->在last结束时 +2G
			p 查看分区表
			d 删除分区
			w 保存并退出
			q 不保存退出

	   三、分区格式化  ：
			  
			- mkfs.ext4  分区设备路径
			- mkfs.xfs   分区设备路径
			- mkfs.vfat  分区设备路径

			 mkfs.xfs 	/dev/vdb1		#格式化vdb1分区
			 blkid 	/dev/vdb1		#查看分区文件系统系统类型
			 mkfs.ext4 -f /dev/vdb1		#强制把vdb1分区的xfs格式给转换为ext4（数据会丢失）

			partprobe : 刷新 新的分区（当磁盘有分区挂载使用时新创的分区得刷新才能得到系统文件）

	   四、挂载使用   ：

			mount /dev/vdb1 /opt    #挂载vdb1分区到 /opt下

			df -h：查看正在挂载使用的信息 并显示易读符号

	   五、综合分区   ：

			
	·使用磁盘空间：
		1.查看识别磁盘： lsblk
		2.划分分区：     fdisk
		3.刷新分区：	  partprobe
		4.格式化分区：   mkfs.ext4   mkfs.xfs	blkid:查看文件系统类型   
		5.挂载使用：     mount
		6.实现开机自动挂载 （磁盘）：	/etc/fstab  #配置开机自动挂载的配置文件
		
		vim使用技巧：在命令模式下 输入o 另起一行，进入插入模式
		·/etc/fstab 的记录格式：
	**	- 设备路径      挂载点     文件系统类型   	  参数       备份标记     检测顺序
		 /dev/vdb1	/part1	xfs/ext4 	defaults	0 (1备份)	0(1备份)		
		

	   ·验证：  
		df -h
		mount  -a  		#检查开机自动挂载
		检测/etc/fstab开子自动挂载配置文件，格式是否正确




    ###############################################################################################



	·LVM逻辑卷：
		(对于/dev/vdc 划分分区： 3个主分区：10G ， 2个逻辑分区：10G与20G)

	   ·作用:    1.整合分散的空间
		     2.逻辑卷的空间可以扩大 :
	**	描述：将众多的物理卷，组成卷组，再从卷组中划分逻辑卷	


	·新建逻辑卷：
		
		1.创建物理卷pv ： pvcreate 分区路径 			#pvs 查看物理卷信息
	
		2.创建卷组vg  ： vgcreate 卷组名  分区路径		#如果没有物理卷会自动创建物理卷，直接用这个
										#vgs 查看卷组信息
					
		3.从卷组中划分逻辑卷lv ：  lvcreate  -L（大小）16G  -n（逻辑卷名字）mylv   卷组名字
										#lvs 查看逻辑卷信息

		4.使用逻辑卷：
			1）.格式化： mkfs.xfs  /dev/systemvg/mylv    
			##新建逻辑卷会生成快捷方式在/dev/systemvg/mylv下  以卷组名/逻辑卷名字 作为路径
			
			2）.挂载： mkdir /test     vim /etc/fstab
			 输入：  /dev/systemvg/mylv  /test   xfs  defaults  0  0
			df -h    mount -a   


     #############################################################################################


	·扩展逻辑卷：  （vg赋予的空间，逻辑卷要扩大只能找创建逻辑卷的卷组要空间）

		一、卷组有足够的剩余空间
			
			lvs   vgs   #查看vg还有没有足够剩余空间
		   扩展空间大小 : lvextend -L 18G(+2G) /dev/systemvg/mylv
			1·空间的大小变为18G
			2.文件系统还是16G（原本的已经格式化过了）
		   扩展文件系统的大小： 1).  ext4：resize2fs       
					 2). xfs : xfs_growfs 
			xfs_growfs /dev/systemvg/mylv   	#刷新文件系统



		二、卷组没有足够的剩余空间

			1.扩展卷组： vgextend systemvg /dev/vdc3    	#把vdc3提供给systemvg卷组扩展
					vgs  #查看卷组	
			
			2.lvextend -L 25G（+7G） /dev/systemvg/mylv	
			
			3.扩展文件系统的大小： ext4：resize2fs  xfs:xfs_growfs
				xfs_growfs  /dev/systemvg/mylv		#刷新文件系统
				


	###·逻辑卷可以缩减：（工作中一般不要缩减） 有可能会让数据丢失或是数据坏了！
		** 顺序不能反不然就直接崩溃了		
		1.缩减文件系统
		2.缩减空间


	·删除逻辑卷：

		先umount 卸除挂载
		先删除逻辑卷lv ------> 然后删除卷组vg ------> 最后删除物理卷pv



    #############################################################################################

	·卷组划分空间的单位： PE = 4M（默认大小）
		
		16个PE的大小的逻辑卷： lvcreate -l 16 -n mylv systemvg		#-l  表PE的个数
	
		划分一个逻辑卷  逻辑卷的大小为250M：
		vgchange -s 1M systemvg  						#改变PE的大小
		lvcreate -L 250M -n mylv systemvg	


___________________________________________________________________________
————————————————————————————————————————————————————————————



2月9号 day02


	


	·Shell脚本基础：

		- 脚本：可以执行的文本文件，可以实现某种功能！
		- 提前设计可执行语句，用来完成特定任务的文件
	
	*    ·将命令都写入到文本文件，然后赋予文本文件执行权限   	#chmod +x 文件路径   加权限

	·非交互式：
		-需要提前设计、智能化难度大
		-批量执行、效率高
		-方便在后台静悄悄地运行


	·规范Shell脚本的一般组成：

		·#！ 环境声明	（声明下列可执行代码用什么程序翻译）
		·#   注释文本	（规定10行以上脚本要写注释）
		·    可执行代码

	·简单的脚本技巧：

		·使用管道操作  |   ：
		
		·重定向输出：
		
			- >  :	 只收集前面命令的正确输出，将其正确输出写入文本文件
			- 2> :	 只收集前面命令的错误输出，将其错误输出写入文本文件
			- &> :   只收集前面命令的正确与错误输出，将其正确与错误输出写入文本文件

	**	·/dev/null ： 黑洞设置，专门收集无用的输出信息！

 	— 为了增加脚本适应多变的环境、多变的需求 使用方便性  所以要用变量 ： 

		·变量：会变化的量，以不变的名称存储可以变化的值。（容器）
		- 变量的定义：  变量名=变化的值（ = 左右不能有空格）
		
 	**  ·设置变量时的注意选项：
				
		- 等号=两边不能有空格
		- 变量名不能以数字在开头，不要使用关键字和特殊字符
		- 变量名只能由字母/数字/下划线组成，区分大小写
			
	— 为了降低脚本使用复杂性，使用交互式 ： 
	
		·read : 产生交互的方式，将用户从键盘上的输入，赋值给变量来储存
		
		·read -p ‘输出内容’ 变量名  : 书写屏幕输出信息 		

	·例子：
		#!/bin/bash
		read -p '请您输入要创建的用户名：' name
		useradd $name  &> /dev/null
		echo $name用户创建成功
		read -p '请您输入要设置的密码：' number
		echo $number  | passwd --stdin $name  &> /dev/null
		echo $name用户设置密码成功


	·查看/引用变量：		*** 随机数 :   $RANDOM

		- 引用变量值： $变量名 、  ${变量名}（推荐用这个）
		
		- 查看变量值：echo $变量名、 echo ${变量名}

	    补充：
		- $[ ]	:  进行数学运算					#echo $[ 2-1 ]		1	

		- $( )	:  将命令的输出结果作为参数 	#echo $(date +%Y)    	2018
		- $() 与 反撇号` `：作用相同
		- ' '	:  让所有的特殊字符，变成普通字符			#echo '$#?*^|{}[]> >>'  


	##	date +%Y ：获取年
		date +%m ：获取月
		date +%d ：获取日
		date +%F ：获取年-月-日


     ###########################################################################################


   **	·环境变量：

		·常见的环境变量：
			-PWD、 PATH、 USER、 LOGNAME
			-SHELL、HOME

		-USER：当前登陆的用户名			#echo $USER        root


	 ·位置变量： 			
		
		·在执行脚本时提供的命令行参数

		格式： $n 	#n为序号		#$1   $2  $3...  ${10}  ${11}... 十及以上要加{ }
			

		例子：   chmod  +x  /root/1.sh
			 /root/1.sh   ($1)ldj   ($2)zgx
			输出： ldj
				zgx

	
	·预定义变量：

	    $#  :  已加载的位置变量的个数 （统计运行脚本时 后面添加的参数 的个数）

	    $*  :  所有位置变量的值	（输出）

	例子： [root@server0 /]# vim /root/1.sh
		
		#!/bin/bash
		echo $1
		echo $2
		echo $3
		echo $#
		echo $*
		
		[root@server0 /]# /root/1.sh  100  200  300  400  500  600
	输出：	100
		200
		300
		6					#  $#
		100  200  300  400  500  600		#  $*


	   $?  :  程序退出后的状态值，0表示正常，其他值异常 （判断这个命令或程序运行成功与否）
			
		[root@server0 /]# cat /root/1.sh  
		[root@server0 /]# echo $? 
		 输出： 0 正常    其他值都是异常


    ############################################################################################


	·条件测试：

		- [ 测试表达式 ]  

	     ·常用的测试选项：
		-检查文件状态：     [  -e  /etc  ] （每一个部分都有空格）
			-e：文档存在为真				#判断文档是否存在
			-d：存在并且为目录，才为真			#判断是否存在,且为目录
			-f：存在并且为文本文件，才为真		#判断是否存在,且为文本文件
			-r：存在并且有读取权限，才为真
			-w：存在并且有写入权限，才为真
			-x：存在并且有执行权限，才为真
	
		-比较整数大小：（带e字母的都有等于二字）
			-gt： 大于		( >  )
			-ge： 大于等于	( >= )
			-eq： 等于		( =   )
			-ne： 不等于		( !=  )
			-lt： 小于		( <   )
			-le： 小于等于	( <= )

		-字符串对比：
			- ==： 相等为真
			- !=：	不相等为真


	·if语句：

		if双分支处理：
		 - 格式：
			if 条件测试 ；then
			  命令序列xx
			eles
			  命令序列yy
			fi


		if多分支处理：
		  - 格式：
			if  条件测试1  ；then
			    命令序列xx
			elif  条件测试2  ；then
			    命令序列xx
			elif  条件测试3  ；then
			    命令序列xx
			else
			    命令序列xx
			fi


    ############################################################################################


	·for循环语句：
		-格式 1：				    -格式 2：
		    for 变量名  in  值列表			for  （（初始化变量值；结束循环条件；运行））
			do					   do
			   命令序列					命令序列
			done					   done





___________________________________________________________________________
————————————————————————————————————————————————————————————



2月11号   day03




	·系统安全保护：

	  ·SELinux 安全机制：
		-美国NSA国家安全局主导开发，一套增强Linux系统安全的强制访问控制体系
		-集成到Linux内核（2.6及以上），中运行	
	      -RHEL7基于SELinux体系针对用户、进程、目录和文件提供了预设的保护策略,以及管理工具
		

	  ·SELiunx运行模式：	#无论那种模式想要变成disabled（彻底禁用），重启系统才可以
		-enforcing（强制）
		-permissive（宽松）
		-disabled（彻底禁用）

	   ·切换运行模式：
		-临时切换：setenforce 1|0   # 1：强制模式  0：宽松模式
		-查看运行模式：getenforce
		-固定配置：/etc/selinux/config 文件


    #############################################################################################


	·防火墙策略管理：
		-作用： 隔离   内网（局域网）与外网（公网）的隔离
		-硬件防火墙、软件防火墙

   *** http:超文本传输协议！
   *** Apache :开源软件基金会
   *** FTP :文件传输协议！

	   ·搭建基本Web：
		服务端：server0.example.com
		  1）.安装服务端软件 httpd  （Nginx  Tomcat）
		  2）.启动httpd服务，设置为开机自启服务
			systemctl restart httpd
			systemctl enable httpd
		  3）.书写自己的主页
			默认网页文件路径： /var/www/html/
			默认网页文件名字： index.html
			默认书写网页内容的语言： html语言
			
		客户端：server0.example.com
		  访问本机服务：  firefox 127.0.0.1
		

	   ·搭建基本FTP：
		服务端：server0.example.com
		  1）.安装服务端软件 vsftpd 
		  2）.启动vsftpd服务，设置为开机自启服务
			systemctl restart vsftpd
			systemctl enable vsftpd
		  3）.默认共享路径： /var/ftp


		客户端：server0.example.com
		  访问ftp： firefox ftp://127.0.0.1


    ##############################################################################################

	
	·Linux软件防火墙：
	·RHEL7 的防火墙体系：

		·系统服务：firewalld
		·管理工具：firewall-cmd（命令）、firewall-config(图形管理机制，不建议)

		·预设安全区域：

		    ·根据所在的网络场所区分，预设保护规则集：
			-public ：仅允许访问本机的sshd等少数几个服务 
			-trusted：允许任何访问
			-block  ：阻塞任何来访请求（明确拒绝，客户端会接收到拒绝）
			-drop   ：丢弃任何来访的数据包（直接丢弃，节省服务器资源）#工作上用这个
	·例子：
	 firewall-cmd --get-default-zone			#查看默认区域
	 firewall-cmd --zone=public --list-all		#查看public区域规则
	 firewall-cmd --set-default-zone=block		#修改默认区域
	 firewall-cmd --get-default-zone			#查看默认区域
	 firewall-cmd --zone=public --add-service=http	#为public区域添加httpd服务
	 firewall-cmd --zone=public --add-service=ftp	#为public区域添加ftp服务
	

		    ·配置规则的位置
			-运行时（runtime）
			-永久（permanent）

		·规则匹配：原则时 匹配及停止
		   - 防火墙判定进入哪一个区域的规则：
			1）.查看客户端请求数据包中，源IP地址，查看自己所有的区域，
			    那个区域，有该源IP地址的策略，则进入那个区域

			2）.如果规则 1） 不符合，则进入默认区域
		·宽松方式 1：默认区域为trusted，将想要拒绝的源IP地址放入block或drop
		·严格方式 2：默认区域为block或drop，将想要允许的源IP地址放入到trusted

	·防火墙的永久配置：

		-永久配置（选项 --permanent）
			firewall-cmd --permanent --zone=public --add-service=ftp  #把ftp加到配置文件中
			firewall-cmd --permanent --zone=public --add-service=http #把httpd加到配置文件中
			firewall-cmd --zone=public --list-all	
		 	firewall-cmd --reload		#重新加载防火墙配置
			

	·防火墙对源ip地址的控制：
		firewall-cmd --set-default-zone=trusted				  #默认为允许任何人访问
		firewall-cmd --permanent --zone=block --add-source=172.25.0.10  #设置这个ip为block
		firewall-cmd --reload					
		firewall-cmd --zone=block --list-all					  #查看
		firewall-cmd --permanent --zone=block --remove-source=172.25.0.10 #删除block里面的ip地址
	
	·端口：数字 编号 标识进程或程序	# 源IP地址  目标ip地址   数据   目标端口号

		-http： 默认端口80		
		-FTP ： 默认端口21

	·端口转发：

		firewall-cmd --permanent --zone=public			#把5423端口转发给80端口
		--add-forward-port=port=5423:proto=tcp:toport=80		 让之可以用

		firewall-cmd --reload
		firewall-cmd --zone=public --list-all



    ############################################################################################	

	
	·配置用户环境：
	
		·影响指定用户的bash 解释环境
		- 家目录/.bashrc，每次开启bash 终端时生效
			
			vim /root/.bashrc
			alias hello='echo hello'

			vim /home/student/.bashrc
			alias hi='echo hi'		


		·影响所有用户的bash 解释环境
		- /etc/bashrc,每次开启bash 终端时生效				
	
			vim /etc/bashrc
			alias abc='echo abc'
	


	·配置高级链接（聚合链接  网卡绑定  链路聚合）：team
		
		-由多块网卡（）
		热备份链接冗（rong）余 （活跃状态   备份状态）

			eth1  team0-slave            eth2  team0-slave   
                                                      
                      team0 虚拟网卡   master  192.168.1.1  


	 ·制作网卡绑定：

	     1.制作虚拟网卡team0，参考 man teamd.conf   全文查找/example 按n调转匹配项

	***	nmcli connection add type team autoconnect yes 
		con-name team0 ifname team0 config '{"runner": {"name": "activebackup"}}'
	
	  #	nmcli connection 添加 add 类型为 type team 的设备 autoconnect yes 每次开机自动启用
		con-name 配置文件命名 为 team0  ifname 网卡显示的名字 为 team0  
		config 网卡内部成员工作模式为 '{"runner": {"name": "activebackup"}}'   （热备）

	    
	    2.为team0添加成员：

	***	nmcli connection add type team-slave  con-name team0-1 ifname eth1 master team0 

		nmcli connection add type team-slave  con-name team0-2 ifname eth2 master team0 

	#	添加  类型为 team-slave 的设备  配置文件命名为 team0-1 网卡为eth1 主设备为team0	

	
	    3.配置team0的 ip地址与激活

		nmcli connection modify team0 ipv4.method manual 			#给team0
		ipv4.addresses 192.168.1.1/24 connection.autoconnect yes	 配ip
		
		#激活：
			nmcli connection up team0		#激活team0网卡
			nmcli connection up team0-1		#激活team0-1成员
			nmcli connection up team0-2		#激活team0-2成员



   ---错误了：
	
	1.删除：
		nmcli connection delete team0
		nmcli connection delete team0-1
		nmcli connection delete team0-2


   ---专用于team测试查看的命令：

		teamdctl team0 state		#查看team0信息  
		ifconfig eth1 down  		#禁用eth1网卡
		teamdctl team0 state    		#查看team0信息


	
	·配置IPv6地址：

		IPv4地址： 32个二进制  点分隔4个部分   十进制表示（127.0.0.1）

		IPv6地址： 128个二进制  冒号 分隔 8个部分   十六进制表示

			- 每段内连续的前置0可省略、连续的多个： 可简化为：：
		例如：
			2003：ac18：0000：0000：0000：0000：0000：0305
			2003：ac18::305



___________________________________________________________________________
————————————————————————————————————————————————————————————


2月22号   day04





	·配置SMB共享： 跨平台共享 Windows 与 Linux

	  ·Samba服务基础：
		-用途：为客户机提供共享使用的文件
		-协议：SMB（TCP139）,CIFS(TCP445)
	  ·所需软件包：samba
	  ·系统服务：smb

	服务端：server0
		1.装包：samba
		2.建立Samba共享帐号
			useradd harry					#帐号
			echo redhat | passwd --stdin harry		#密码

		·Samba用户 ： 专门用来访问共享文件的用户
			-采用独立设置的密码
			-但需要提前建立同名的系统用户（可以不设置密码）

		·使用 pdbedit 管理工具		
			pdbedit -a  用户名			#将本地用户设置为Samba共享帐号
			pdbedit -L				#显示本地都有那些Samba共享帐号
			pdbedit -x  用户名			#将删除本地用户的Samba共享帐号

		3.修改配置文件设置Samba共享 ： /etc/samba/smb.conf
			[自定义共享名]
			path = 文件夹绝对路径
 		    # workgroup = 工作组名   （=两边有空格）	#设置工作组
			
			[common]				#设置共享名
			path = /common			#设置共享的实际路径

		4.重起smb服务，开机自启
			systemctl restart smb		#重启服务
			systemctl enable smb		#设置开机自启

		5. SELinux设置 布尔值（功能的开关）
			#工作时 需要加上 -P 选项才能修改实现永久设置

			getsebool -a | grep samba			#查看所有布尔值
			setsebool samba_export_all_ro  on 		#修改布尔值
			getsebool -a | grep  samba			#查看所有布尔值




	客户端：desktop0
#########			****不用这种方法来访问共享文夹的数据****					#########
	   	1·所需软件包：
			samba-client			#安装客户端的共享软件包
		2.查看对端的共享名：
			smbclient -L 172.25.0.11		#查看共享服务端的信息 
		3.访问对端的共享：
			smbclient -U harry  //172.25.0.11/common   #访问harry帐号的/common路径
#########													#########

	·采用更加方便科学的访问方式：
	   ·使用mount挂载：
		1.创建挂载点： mkdir /mnt/nsd 

		2. 所需软件包： cifs-utils

		3.手动挂载：   mount -o  user=harry,pass=123  //172.25.0.11/common  /mnt/nsd/
			ls  /mnt/nsd  
			df -h

	·实现开机自动挂载： /etc/fstab

			_netdev : 标识本设备为网络设备。（先启动网络服务，具备ip地址等网络参数后，再进行挂载本设备）
			cifs ： samba共享设备的网络文件系统

	vim  /etc/fstab
	//172.25.0.11/common   /mnt/nsd  cifs  defaults,user=harry,pass=123,_netdev  0  0
	
	umount /mnt/nsd            df-h
	mount  -a                  df-h		#检测/etc/fstab 是否书写正确


     ###########################################################################################

	实现可以读写的samba共享：

	·服务端：server0		
		1.修改配置文件，设置新的共享：
			vim  /etc/samba/smb.conf
		[devops]
		path = /devops
		write list = chihiro		#声明chihiro可写

		2.重建相应的目录：
			mkdir /devops
			echo abc > /devops/abc.txt
			ls /devops

		3.重启smb服务，设置开机自启
			systemctl  restart  smb
			systemctl  enable   smb	
		
		4.设置本地权限：
			setfacl -m u:chihiro:rwx  /devops/
			getfacl /devops/

		5.修改SELinux功能开关
			getsebool -a | grep samba
			setsebool  samba_export_all_rw  on		#修改布尔值


	·客户端：desktop0
		
		vim /etc/fstab
		//172.25.0.11/devops  /mnt/dev/ cifs defaults,user=chihiro,pass=123,_netdev 0 0

		mkdir /mnt/dev 
		mount -a           df -h
	
	·客户端上传到服务端的资源：
	 （***服务端的操作***） 
		1. 服务本身访问控制
			write list = chihiro		#声明chihiro可写
		2.目录的本地权限
			setfacl -m u:chihiro:rwx  /devops/
		3.SELinux访问控制  （设置布尔值）
			setsebool  samba_export_all_rw  on
		4.防火墙策略控制


       #########################################################################################
###了解就行一般用不到，太麻烦！
	·多用户（multiuser）的samba共享，专为普通用户设计：	
	   ·SMB客户端的multiuser挂载技术
		-管理员只需要作一次挂载
		-客户端在访问挂载点时，若需要不同权限，可以临时切换为新的共享用户（不需要重新挂载）
	   ·实现方式：
		1.挂载SMB共享时使用 multiuser支持
		2.使用cifscreds 临时切换用户
	·客户端操作：
		1.开机自启挂载配置文件，添加参数
		  -multiuser ，提供对客户端多个用户身份的区分支持
		  -sec=ntlmssp ，提供NT局域网管理安全支持
		vim   /etc/fstab
		//172.25.0.11/devops  /mnt/dev  cifs defaults,user=kenji,pass=123,_netdev,multiuser,sec=ntlmssp 0 0
		umount /mnt/dev/
		mount -a  		 df -h
		su -student
		cifscreds add -u chihiro 172.25.0.11
###了解就行一般用不到，太麻烦！
     #############################################################################################


	·配置NFS共享：   Linux 与 Linux之间的共享

	   ·Network File System,网络文件系统
		-用途：为客户机提供共享使用的文件夹
		-协议：NFS（TCP/UDP 2049）,RPC（TCP/UDP 111）

	    ·所需软件包：nfs-utils
	    ·系统服务：nfs-server

	服务端：server0
		1.所需软件包：nfs-utils
		
		·修改 /etc/exports
		-文件夹路径   客户机地址（权限）	客户机地址（权限）.....

		vim /etc/exports
		/public *(ro)
		
		mkdir /public
		cp /etc/passwd /public/pass.txt
		systemctl restart  nfs-server
		systemctl enable nfs-server


	客户端：desktop0

		mkdir /mnt/nfs
		showmount -e 172.25.0.11			#查看有那些nfs共享
		vim /etc/fstab
		172.25.0.11:/public  /mnt/nfs  nfs  defaults,_netdev  0  0
		mount -a   df -h


___________________________________________________________________________
————————————————————————————————————————————————————————————

https：//github.com/redhatedu/course #网络笔记




2月23号  day05




****	（SMB，NFS共享目录    iSCSI共享磁盘）



	·iSCSI共享（磁盘共享 internet scsi）：
		- 一种基于C/S架构的虚拟磁盘技术
		- 
	-做iscsi服务需要的三个步骤：
	  1.backstore： 后端真正的存储设备（实物）
	  2.target： 共享名（虚拟）	
	    target共享名有要求，要符合iqn规范：  iqn.年-月-日.反转域名（com.baidu.www）:任意字串
	  -  例如： iqn.2018-02-25.com.baidu.www:avi

	  3.lun：绑定 关联某个存储设备


	·服务端server0：
		1).在server0上准备一个磁盘分区（vdb1） 3G

		  fdisk  /dev/vdb
		   #不要格式化，目的是给别人用的
		
		2).安装targetcli 软件
		
		   yum -y install targetcli			#安装targetcli软件
		
		3).修改配置：

		   targetcli					#进入使用targetcli软件
		   ls							#查看内容

		   backstores/block  create  back_store  /dev/vdb1    	 #把分区加入后端存储
		    存储路径		   添加	名称  		磁盘分区路径

		    iscsi/ create iqn.2018-02.com.example:data		 #创建一个iscsi共享（共享名称)
				添加		共享名称要符合iqn规范
	
		   iscsi/ create iqn.2018.02.com.example:tar    #名称规范错误
		创建iscsi共享名时如果提示：
		注意：WWN not valid as:iqn, naa, eui,
		     说明名称不符合规则

		iscsi/iqn.2018-02.com.example:data/tpg1/luns  create  /backstores/block/back_store 
		    	共享名通过lun					  连接，添加		后端设备
			#把共享名和后端的设备通过lun关联在一起

		iscsi/iqn.2018-02.com.example:data/tpg1/acls  create iqn.2018-02.com.example:desktop0
		   #创建了一个访问的口令:iqn.2018-02.com.example:desktop0
		   #以后仅知道口令的客户端才可以访问共享

		iscsi/iqn.2018-02.com.example:data/tpg1/portals create 172.25.0.11
		  #以后客户端访问本机的172.25.0.11的3260端口就可以访问到共享磁盘
		   
		    saveconfig	#保存
		    exit		#退出，会自动保存
		    firewall-cmd --set-default-zone=trusted 	#设置防火墙允许访问



		
	·客户端desktop0：

		1).安装iscsi-initiator-utils
		   yum -y install iscsi-initiator-utils
		
		2).修改配置：

		   lsblk		#查看存储设备

		vim /etc/iscsi/initiatorname.iscsi			
		     nitiatorName=iqn.2018-02.com.example:desktop0
		#注意在这里给客户端配置访问口令，一定要与服务器的ACL一致
		
	***	man iscsiadm    #在最后，找到参考命令
	
iscsiadm --mode discoverydb --type sendtargets --portal 172.25.0.11 --discover
		  #发现对方服务器上的共享				改ip地址

iscsiadm --mode node --targetname iqn.2018-02.com.example:data --portal 172.25.0.11:3260 --login
		 #挂载172.25.0.11服务器上的共享iqn.2018-02.com.example:data
		
# Ctrl+Shift++ 放大终端
# Ctrl+-	   缩小终端

		#如果挂载提示authentication
		systemctl restart iscsid    	#重启iscsid服务
		
		lsblk				#查看有没有得到磁盘 sda 
		～之后就是格式化挂载使用了！


   #############################################################################################

	
	·DB（database）数据库：存放数据的地方

		·DBMS（数据库管理系统）：是具体的产品，软件：
			如：-excel,access,mysql,sql-server,oracle
	  ** RHEL7（内置的数据库是MariaDB）之前的是mysql

		在server0：

		  yum -y install mariadb-server      	#mariadb-server服务器
		  yum -y install	mairadb			#mairadb客户端
		#使用客户端软件连接数据库服务器做增，删，改，查操作		
			
		  systemctl start  mariadb			#启动服务

	    ·使用软件：		
		  -mysql				#使用mariadb软件的命令
	
		MariaDB [(none)]> show databases;		#查看有哪些数据库(数据库就是目录)
		MariaDB [(none)]> use mysql;			#进入数据库（mysql）
		MariaDB [mysql]> show tables;			#查看有那些数据表
		MariaDB [mysql]> select * from user;		#查看数据表里的数据
		exit
		
		mysqladmin -uroot password '123456'		
		  #给mariadb数据库的管理员root修改密码，密码为：123456
	·登陆数据库：
		mysql  			#直接登陆数据库会失败
		mysql -uroot -p123456	#使用 用户与密码登陆 	-p不能有空格

		MariaDB [(none)]> create database dj;  	#创建一个新的数据库 dj
		MariaDB [(none)]> show databases;		#查看有哪些数据库(数据库就是目录)
		MariaDB [(none)]> drop database dj;		#删除 dj数据库

	*** 提示，创建的数据库都会在/var/lib/mysql目录下

		MariaDB [(none)]> use dj;			#进入 dj数据库

		MariaDB [dj]> create table info		#创建一个表，表名为info，有三列
   		 -> (id int,					#第一列是id，类型是数字
   		 -> name varchar(10),				#第二列是name，类型是字符串，10位
   		 -> password varchar(20));			#第三列是password，类型是字符串，20位

		MariaDB [dj]> describe info;			#查看info表的结构属性

		MariaDB [dj]> insert into  info  values (1,'tom','123456');
		  #往info这个表里插入数据，id号，名字，密码
		
		MariaDB [dj]> select * from info;		#查看info表的所有数据

		MariaDB [dj]> insert into  dj  values (1,'tom','123456'),
   		 -> (2,'taom','123456'),
   		 -> (3,'toam','123456');
		    #同时插入多条信息

		MariaDB [(none)]> drop table dj;		#删除dj这个表  
		MariaDB [(none)]> exit


	-数据库的备份与还原：（在机上操作，不是在数据库中操作）

		mysqldump -uroot -p123456  dj > my.bak
		  #把名称为dj的数据库备份，备份到my.bak文件	

		mysql -uroot -p123456 dj < my.bak
		  #使用my.bak这个备份文件，还原名称为dj的数据库

	** 备份的是dj数据库的内容，删除了dj数据库 还原的时候就找不到dj这个数据库了  **

     ############################################################################################
	

	·默认mariadb数据库仅有一个账户（root）
	   -创建新的账户：

		mysql -uroot  -p123456
	
		MariaDB [(none)]> grant all on dj.* 	    #授予tom这个账户对dj数据库下的所有表的所有权限
		  -> to tom@'localhost' 		
		  -> identified by '123456';		
	  #grant all里面的all是所有权限，也可以只赋予具体指令[ select，insert ]（查和插入）	
	   #表tom只能从本机登陆数据 tom@'172.25.0.10'表只能在desktop0 登陆		 
	  #identified by设置密码


	·表记录的操作（表数据的操作）:    where(条件)

	  ** 增：insert  

		MariaDB [dj]> insert into  dj  values (1,'tom','123456'),
   		 -> (2,'taom','123456'),
   		 -> (3,'toam','123456');
	     #往dj这个表里插入增加3条数据，（id号，名字，密码）
		
	
	  ** 查：select 

		MariaDB [(none)]>use dj;
		MariaDB [dj]> select * from dj;		# * 查看dj数据表的所有数据
		MariaDB [dj]> select id,name from dj;	# id,name  仅查看dj数据表的这两列数据
		MariaDB [dj]> select * from dj
		    -> where password='123456'; 		#查看dj表中password是123465的所有数据


	  ** 改：update 

		MariaDB [dj]> update dj			#更新dj表的内容
		    -> set password='123'		#设置password为123
		    -> where name='tom'; 		#在name为tom这一行

	  ** 删：delete

		MariaDB [dj]>delete from  dj 		#删除dj表的内容
		    -> where name='tom';			#当name为tom时删了这一行
		#不加条件就会删除表里的所有数据


	-and:且

		MariaDB [dj]> select * from dj
		    -> where password='123456' 
		    -> and id=1  and id=5;
		#查看dj表中password是123465 且id为1和5 的所有数据

	-or：或
		
		MariaDB [dj]> select * from dj
		    -> where password='123456' 
		    -> or id=1;
		#查看dj表中password是123465 或id为1 的所有数据
	
	** 多表查询：
		MariaDB [(nb)]> SELECT count(*) 
		 -> FROM base,location
		 -> WHERE base.name="Barbara" AND
		 -> location.city="Sunnyvale" AND
		 -> base.id=location.id;		


___________________________________________________________________________
————————————————————————————————————————————————————————————


2月26号  day06-1



	·Web通信 B/S架构的网页服务概念:
	   ·web服务器：（把某个目录共享，放网页文件.html）
		-服务端提供网页
		-浏览器下载并显示网页
	
	    ·网站基于B/S设计（浏览器/服务器），在服务器上共享的文件都是：HTML

	·服务端server0：
	
	   1）.装包启服务：		
		firewall-cmd --set-default-zone=trusted   #防火墙默认允许任何人访问

		yum -y install  httpd		#Apache基金会的httpd软件
		systemctl start httpd		#默认共享了/var/www/html 目录
	
	   2）.编写HTML网页文件： ** 必须放在/var/www/html目录下，且文件名为index.html

	     vim  /var/www/html/index.html
		<html>
		<head>
		<title>Hello World</title>
		</head>
		<body>
		<h1>HELLo</h1>
		<h2>world</h2>
		<font color=red>小姐姐！</font>
		</body>
		</html>
	     firefox  http://127.0.0.1 (172.25.0.11)	#用火狐浏览器访问默认的index.html网页

	     vim  /var/www/html/dj.html
		<html>		
		约不约！
		</html>
	     firefox  http://127.0.0.1/dj.html (172.25.0.11/dj.html)	#dj.html不是默认的要加路径
	

	   3）.httpd的配置文件：（在这两个地方）
		   /etc/httpd/conf/httpd.conf			#主配置文件
		   /etc/httpd/conf.d/				#目录  

		vim /etc/httpd/conf/httpd.conf 	#仅需要打开查看，主配置文件
		   Listen 80 				#服务器监听端口
		   DocumentRoot "/var/www/html"	#网站的根路径在那，页面的存放位置
		   DirectoryIndex  index.html		#默认的首页的名字（公认的就是index.html）
		  #ServerName  www.example.com:80	#服务器的域名是什么，被注释掉了
		   IncludeOptional  conf.d/*.conf	#加载conf.d目录下的所有配置文件




	·虚拟主机：
		**一台服务器，安装一个httpd服务，做了一个网站 （浪费）
		**一台服务器，安装一个httpd服务，做n个网站
	  ·虚拟主机类型：
		-基于IP地址：要求 多网卡，多IP
				172.25.0.11 第一个网站
				172.25.0.12 第二个网站
		-基于域名： 要求买多个域名
		-基于端口


    ·server0创建基于域名的虚拟主机：
	  
		  -域名使用：server0.example.com 和www0.example.com 
	  -第一个域名网站：
		vim  /etc/httpd/conf.d/server.conf		#该文件是不存在的
		  <VirtualHost *:80>
			ServerName  server0.example.com	#域名
			DocumentRoot  /var/www/html		#存放网站的目录位置，路径
		  </VirtualHost>
	  -第二个域名网站：
		vim  /etc/httpd/conf.d/www.conf		#该文件是不存在的
		  <VirtualHost *:80>
			ServerName  www0.example.com		#域名
			DocumentRoot  /var/www/dj		#存放网站的目录位置，路径
		  </VirtualHost>

		mdkir /var/www/dj					#创建第二个域名的网站存放目录
		vim  /var/www/dj/index.html			#创建第二个域名的网页
		   <html>		
		    约不约！
		   </html>
		systemctl restart  httpd				#重启服务



      ·desktop客户端访问：
		-curl :在字符界面显示网页文件的内容
		curl  http://server0.example.com		#用curl浏览器打开第一个域名网站
		curl  http://www0.example.com			#用curl浏览器打开第二个域名网站
		

     ############################################################################################


	·网页的目录结构：

		vim  /var/www/html/index.html		#默认网页index.html		
			hello wrod	
		vim  /var/www/html/test.html		#网页test.html
			nb is nb
		mdkir /var/www/html/haha			#web站点根目录下新建子目录haha
		echo "xixi" > /var/www/html/haha/index.html	#子目录haha下的默认网页

		firefox http://server0.example.com			#访问默认web站点根下的默认网页
		firefox http://server0.example.com/test.html	#访问默认web站点根下的test.html
		firefox http://server0.example.com/haha/		#访问默认web站点根下haha/下的默认网页


	·ACL访问控制：
	    -格式：
		<Directory  目录的绝对路径>
			Require all（任何）  denied（拒绝）|granted（允许）
			Require ip  IP或网段地址..
		</Directory>
	   -例子：

		vim /etc/httpd/conf.d/server.conf
				.....
		  <Directory  /var/www/html/jpg>		#设置目录为/var/www/html/jpg
			Require ip  172.25.0.10		#仅设置172.25.0.10这个ip可以访问图片
		  </Directory>
		systemctl restart  httpd			#重启http服务


	·SELinux安全策略保护：
		** 一般系统安全都是通过账户权限设置   （缺点：用管理员运行程序 程序权限和管理员一样大）
		
		-SELinux控制每个软件能否读写某些资料

		-SELinux有安全上下文件标签 : ls -Z
			ls -Z   #会发现每个文档都有一个标签  倒数第二个标签控制了那些程序能读写什么标签
		
		-如：SELinux设置规则说：
			httpd这个软件，只能读写有httpd_sys_content_t 这个标签的文档
	**   备注：在计算机中mv移动文件，权限会被保留
		    在计算机中cp拷贝文件，权限不会保留

	**   标签是SELinux设置的规则！！
		-例子：
			cd /root/
			echo "nb" > nb.html
			ls -Z  nb.html			#查标签，为管理员的标签
			mv nb.html  /var/www/html	#ls -Z 标签不一样
			firefox server0.example.com/nb.html  #没法打开，权限不够

	**	·改标签命令：			
			-chcon -R -t 标签内容   文件或目录名

	查错步骤：
		1.防火墙有没有允许访问
		2.权限rwx对不对
		3.SELinux标签对不对
		4.配置文件，没启动服务
	    -setenforce 0		#关闭SELinux
	    -setenforce 1		#开启SELinux
	
___________________________________________________________________________
————————————————————————————————————————————————————————————


2月27号  day06-2


	静态页面：html,mp3,flv,jpg,gif等都是静态
	动态页面：需要被服务器的解释器解释的页面
		java,php,python,shell
	**动态页面是需要解释器解释的！！
	httpd这个软件本身不能解释java,php,python代码

      ·服务器server0操作：（要求要有httpd）
		1).安装mod_wsgi软件：

			yum -y install mod_wsgi		#mod_wsgi该软件可以让httpd与python交互

		#当用户要访问一个python脚本时，httpd可以把页面脚本给python执行一遍，然后把执行结果给用户
			client <----> httpd <-----> python

	-做第三个虚拟主机：（这个网站是基于python动态网站）
		要求：域名使用webapp0.example.com
		      端口使用：8909

		vim  /etc/httpd/conf.d/webapp.conf
			Listen 8909					#开启打开8909端口
			<VirtualHost *:8909>			#使用8909端口
				ServerName webapp0.example.com
				DocumentRoot /var/www/webapp
				WSGIScriptAlias / /var/www/webapp/webinfo.wsgi	#取脚本别名
			  #当你访问网站的根时，等同于访问/var/www/webapp/webinfo.wsgi  			
			</VirtualHost>
		
		mkdir /var/www/webapp/
		wget http://classroom/pub/materials/webinfo.wsgi -O /var/www/webapp
		#下载文件  -0：保存到   /文件目录

		systemctl restart httpd	
		 #重启httpd服务失败，提示执行'journalctl -xn'
		 #SELinux还控制谁能用什么端口也要控制，默认允许httpd使用80，443端口
	
	·semanage工具开放端口： 在服务端口范围中增加新的端口

		semanage port -a -t http_port_t -p tcp 8909
		   #使用selinux管理命令修改端口配置
		  #-a是添加一条规则
		  #-t是指定http能使用什么端口
		  #-p允许httpd使用tcp的8909端口
            systemctl restart httpd		#重启服务

	客户端desktop0：

		firefox http://webapp0.example.com:8909

    ***    SELinux：提前写好的规则
		   -什么软件能读取什么标签的文件或目录
		   -什么软件能使用什么端口
	  **   都是提前写好写死在代码规则里了


___________________________________________________________________________
————————————————————————————————————————————————————————————



2月27号  day07


    ** HTTP是明文协议，网络中传输的任何数据都是明文包括用户和密码，如果有人抓包，所有数据都可以获得
	
	·HTTPS网站加密：
		
		-加密算法：
			1·对称算法（AES，DES）
			2.非对称算法（RSA，DSA）
			3.信息摘要（md5，sha512，sha265）
		
		-对称加密：（加密和解密是一把钥匙）适合单机加密！

		-非对称加密：（加密和解密不是一把钥匙『公钥和私钥』）适合网络传输加密！

		-信息摘要  -格式： md5sum 文件名
			#数据完整性校验（检查数据是否被人修改过）
   

	·服务端server0：
		1）.安装软件包mod_ssl
			yum -y install mod_ssl		#让httpd支持加密网站

		去classroom下载公钥
			wget  http://classroom.example.com/pub/tls/certs/server0.crt			
		去classroom下载私钥
			wget	http://classroom.example.com/pub/tls/private/server0.key
		去classroom下载根证书（上面私钥和公钥是谁提供的）
			wget  http://classroom.example.com/pub/example-ca.crt

	***	提示：这三个密钥原则上方那都可以，但是有默认潜规则 存放目录路径
			- 公钥/证书： /etc/pki/tls/certs/证书文件.crt
			- 私钥：  /etc/pki/tls/private/私钥文件.key

		vim /etc/httpd/conf.d/ssl.conf
		  <VirtualHost *:443>				#加密端口是443
			 SSLEngine on				#打开网站的加密功能，不打开没法用
       		 ServerName server0.example.com
      		 DocumentRoot /var/www/html/
      		 SSLCertificateFile /etc/pki/tls/certs/server0.crt
       		 SSLCACertificateFile /etc/pki/tls/certs/example-ca.crt
      		 SSLCertificateKeyFile /etc/pki/tls/private/server0.key
		  </VirtualHost>
		systemctl restart httpd

	
	·客户端验证desktop0：
		
		firefox  http://server0.example.com			#非加密，http
		firefox  https://server0.example.com			#加密访问，https
		

    #############################################################################################


	·邮件系统（postfix）：可以做类似于163的邮件系统     （默认不带图形界面）
		**Linux自带
	    
	    ·修改邮箱配置信息：
		vim /etc/postfix/main.cf
		   76:  myhostname = server0.example.com	#改76行的 主机名
		   83： mydomain = example.com			#改83行的 域名的后缀，邮箱的后缀 @example.com
		   99:  myorigin = $mydomain			#改99行 发件人的后缀
		   116：inet_interfaces = all		#允许所有人给自己发邮件，默认仅接收本机发的邮件
		   164： mydestination = $myhostname, localhost.$mydomain, localhost
			#什么邮箱我才接受
		systemctl restart postfix

	   ·发邮件命令：
		mail -s 标题  收件人
		  内容
		  内容
		  .		#独立的点回车表示邮件内容结束
	    -例子： mail -s hello  root
			hello world
			.
	
	    ·收邮件命令： mail [-u 用户名]      #收邮件，q退出


     ############################################################################################


	·分区工具fdisk ，parted

		-fdisk分区只能分4个主分区
		-fdisk分区每个分区最大只能是2T

	  -parted可以分超过4个主分区（128），分区大小可以大于2T
	  -parted分区首先要选择分区的类型msdos，gpt模式
  **	  -msdos就是fdisk使用的模式

	·parted命令格式：   parted  分区目录   mklabel  gpt（类型）

           parted /dev/vdb  mklabel gpt			#选择分区模式，可以是msdos或者gpt
	     parted /dev/vdb  mkpart primary 1 1G		
	#对/dev/vdb分区（mkpart），分主分区（primary），从硬盘的第1M～1G之间的容量分一个分区
	     parted /dev/vdb mkpart primary  1G  5G	#分第二个主分区1G～5G  共4G

	    parted /dev/vdb  print  		#查看 /dev/vdb 的分区详情
	    mkfs.xfs  /dev/vdb1			#为第一个主分区格式为xfs格式

	·交换分区的使用：
	    mkswap  /dev/vdb2			#交换分区是把硬盘当内存使用的分区，第二个主分区
		#格式化成swap分区	
	    vim /etc/fstab				#永久挂载
		/dev/vdb2  swap swap  defaults 0 0 	#不用挂载点 直接挂载到swap
	    mount -a（如果没有挂载激活）/  swapon -a #启动
































































